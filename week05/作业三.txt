
1.在你目前的工作场景中，哪个业务适合使用 rabbitmq？ 引入 rabbitmq 主要解决什么问题?（非相关工作可以以设计淘宝购物和结账功能为例来描述）
用户在淘宝购物支付完成后，无须等待后台操作确认。
rabbitmq在购物车清除，订单生成，收款等业务异步执行



2.如何避免消息重复投递或重复消费？
      在消息生产时，MQ 内部针对每条生产者发送的消息生成一个 inner-msg-id，作为去重的依据（消息投递失败并重传），避免重复的消息进入队列；在消息消费时，要求消息体中必须要有一个 bizId（对于同一业务全局唯一，如支付 ID、订单 ID、帖子 ID 等）作为去重的依据，避免同一条消息被重复消费。



3.交换机 fanout、direct、topic 有什么区别？

最常用的交换机有三种：direct、topic、fanout。他们分别称作：“直接连接交换机”，“主题路由匹配交换机”，“无路由交换机”。

fanout交换机不需要routingkey绑定，和路由没有关系，它是直接绑定到队列的。
fanout交换机直接绑定了队列，没有经过routingkey进行匹配之类的，相对来说是所有交换机中最快的。

匹配模式的不同：
fanout类型的Exchange路由规则简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中。

direct类型的Exchange路由规则也很简单，它会把消息路由到那些binding key与routing key完全匹配的Queue中。

topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中，但这里的匹配规则有些不同。





4.架构中引入消息队列是否利大于弊？你认为消息队列有哪些缺点？

优势：将消息写入消息队列，非必要的业务逻辑以异步的方式运行，加快响应速度。
劣势：系统可用性降低，
	系统复杂性增加:要多考虑很多方面的问题，比如一致性问题、如何保证消息不被重复消费，如何保证保证消息可靠传输。





